class Class_name(object) | 类名通常大写开头（约定俗成，不强制），object表示该类继承的类名，如果没有继承类，就写object,因为object类是所有类最终都会继承的类。
def __init__(self,x,y,z...) | 通过定义一个特殊的__init__方法，在创建实例的时候，就把类属性初始化。 
第一个参数永远是self，表示创建的实例本身
因为__init__方法，故在创建实例的时候，传入的参数不能为空（除非没有属性），传入的是self的属性，self不用写。
要在类内定义一个方法，第一个参数是self外，其他和普通函数一样。当实例化一个对象之后，要调用这个方法，则用实例名.方法名(参数1，参数2)。参数1是self，不用写，只需写其他的参数即可。
私有变量 | 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问.
class Student(object):

def __init__(self, name, score):
    self.__name = name
    self.__score = score

def print_score(self):
    print '%s: %s' % (self.__name, self.__score)
1
2
3
4
5
6
7
8
此时已经无法通过实例名.__name来访问__name和__score属性了，此时如果想修改这两个属性，可以在类内定义修改的方法。
双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量
有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”
特殊变量 | 在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名
继承和多态 | 继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写； 
有了继承，才能有多态。在调用类实例方法的时候，尽量把变量视作父类类型，这样，所有子类类型都可以正常被接收；
旧的方式定义Python类允许不从object类继承，但这种编程方式已经严重不推荐使用。任何时候，如果没有合适的类可以继承，就继承自object类
对象的类型 | 判断一个对象是什么类型有几种方法： 
type():基本类型都可以用type()判断
对于class的继承关系来说，使用type()就很不方便。我们要判断class的类型，可以使用isinstance()函数
--------------------- 
作者：Ian ma 
来源：CSDN 
原文：https://blog.csdn.net/horseinch/article/details/51708016 
版权声明：本文为博主原创文章，转载请附上博文链接！
